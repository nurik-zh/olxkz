package routes

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"olxkz/config"
	"olxkz/middleware" // –µ—Å–ª–∏ middleware –µ—Å—Ç—å
	"olxkz/models"
)

// –ë–∞—Ä–ª—ã“õ user —Ä–æ—É—Ç—Ç–∞—Ä—ã–Ω —Ç—ñ—Ä–∫–µ—É
func RegisterUserRoutes(r *gin.Engine) {
	users := r.Group("/users")
	users.Use(middleware.AuthMiddleware()) // üîê –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
	{
		users.GET("", GetAllUsers)
		users.DELETE("/:id", DeleteUser) // –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	}
}

// –ë–∞—Ä–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –∞–ª—É
func GetAllUsers(c *gin.Context) {
	var users []models.User

	// –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := config.DB.Find(&users).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "“ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã"})
		return
	}

	// –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –ø–∞—Ä–æ–ª—è
	c.JSON(http.StatusOK, users)
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func DeleteUser(c *gin.Context) {
	id := c.Param("id") // –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL

	var user models.User

	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
	if err := config.DB.First(&user, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if err := config.DB.Delete(&user).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"})
}
